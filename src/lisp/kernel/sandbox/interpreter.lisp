(in-package #:clasp-sandbox)

;;; This is supposed to fill an environment so that it matches what the interpreter has available.

(defun import-interpreter-knowns (environment)
  (setf (sicl-genv:macro-function 'core:backquote environment)
        (macro-function 'core:backquote))
  (macrolet ((dec (name ll)
               `(declare-function ',name ',ll environment))
             (decs (&rest pairs)
               `(progn ,@(loop for (name . ll) in pairs
                               collect `(dec ,name ,ll)))))
    (decs
     (core:backquote-append &rest lists)
     (core:backquote-append-list &rest lists)
     (core:backquote-completely-process x)
     (core:backquote-process ox)
     (core:backquote-bracket x)
     (core:backquote-splicing-frob x)
     (core:backquote-frob x)
     (core:backquote-maptree op x)
     (core:backquote-simplify x)
     (core:backquote-simplify-args x)
     (core:backquote-null-or-quoted x)
     (core:backquote-attach-append op item result)
     (core:backquote-attach-conses items result)
     (core:backquote-remove-tokens x)
     (core:select-package package-designator)
     (core:*make-special this)
     (values &rest objects)
     (core:set-source-info this source-info)
     (core:fset function-name function &optional is-macro pretty-print lambda-list)
     (string designator)
     (core:coerce-to-package designator)
     (core:coerce-to-function designator)
     (symbolp object)
     (core:get-sysprop key area)
     (funcall function-designator &rest arguments)
     (type-of object)
     (consp object)
     (car list)
     (cdr list)
     (list &rest objects)
     (find-symbol sym &optional package)
     (list-all-packages)
     (atom object)
     (clos:classp object)
     (si:subclassp low high)
     (class-of object)
     (error datum &rest arguments)
     (member item list &key key test test-not)
     (not object) ; has cleavir inline def
     (first list)
     (integerp object) ; inline cleavir
     (si:fixnump object) ; inline
     (eq obj1 obj2) ; inline
     (characterp object) ; inline
     (standard-char-p character)
     (rationalp object)
     (floatp object)
     (endp list)
     (second list)
     (<= &rest reals)
     (< &rest reals)
     (>= &rest reals)
     (> &rest reals)
     (complexp object)
     (null object) ; inline
     (realpart complex)
     (imagpart complex)
     (core:base-string-p object)
     (stringp object)
     (array-rank array) ; inline
     (numberp object)
     (= &rest numbers)
     (listp object)
     (array-dimension array axis-number) ; inline
     (simple-string-p object)
     (array-element-type array)
     (apply function-designator &rest spreadable-arguments)
     (find-class symbol &optional errorp env)
     (core:Row-major-aset array index value)
     (logand &rest integers)
     (mapc op &rest lists)
     (mapl op &rest lists)
     (mapcar op &rest lists)
     (maplist op &rest lists)
     (mapcan op &rest lists)
     (mapcon op &rest lists)))
  (macrolet ((defv (name)
               `(setf (sicl-genv:special-variable ',name environment nil) nil)))
    (defv *package*))
  (values))
