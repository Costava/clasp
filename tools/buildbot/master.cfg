# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from buildbot.plugins import worker

import boto3

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
session = boto3.session.Session()
renamable_ami = 'ami-05fab89716dff4dd4'
c['workers'] = [
    worker.EC2LatentWorker('clasp_bot','claspsekrit', 'c4.2xlarge',
                           tags={'Name': 'clasp_bot'},
                           elastic_ip='52.15.210.174',
                           ami=renamable_ami,
                           region='us-east-2',
                           keypair_name='clasp-ohio',
                           security_name='latent_buildbot_worker',
                           session=session,
                           placement='b',
                           spot_instance=True,
                           max_spot_price=0.10,
                           price_multiplier=1.15,
                           product_description='Linux/UNIX',
                           instance_profile_name='buildbot-worker'
    ),
    worker.EC2LatentWorker('cando_bot','claspsekrit', 'c4.2xlarge',
                           tags={'Name': 'cando_bot'},
                           elastic_ip='18.223.236.180',
                           ami=renamable_ami,
                           region='us-east-2',
                           keypair_name='clasp-ohio',
                           security_name='latent_buildbot_worker',
                           session=session,
                           placement='b',
                           spot_instance=True,
                           max_spot_price=0.10,
                           price_multiplier=1.15,
                           product_description='Linux/UNIX',
                           instance_profile_name='buildbot-worker'
    ),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    'https://github.com/clasp-developers/clasp.git',
    workdir='gitpoller-workdir', branch='testing',
    pollInterval=30))
c['change_source'].append(changes.GitPoller(
    'https://github.com/drmeister/cando.git',
    workdir='gitpoller-workdir-cando', branch='testing',
    pollInterval=30))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'clasp' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all_clasp",
                            change_filter=util.ChangeFilter(branch='testing'),
                            treeStableTimer=None,
                            builderNames=["clasp"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force_clasp",
                            builderNames=["clasp"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all_cando",
                            change_filter=util.ChangeFilter(branch='testing'),
                            treeStableTimer=None,
                            builderNames=["cando"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force_cando",
                            builderNames=["cando"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.


##### Build clasp

waf_distclean = steps.ShellCommand(name="waf distclean",
                                   command=["./waf", "distclean"],
                                   description="waf distclean",
                                   haltOnFailure=True)
git_clasp = steps.Git(repourl='https://github.com/clasp-developers/clasp.git', mode='incremental', haltOnFailure=True)
add_cando = steps.ShellCommand(name="waf add_cando_extension_testing",
                               command=["./waf", "add_cando_extension_testing"],
                               description="waf add_cando_extension_testing",
                               haltOnFailure=True)

setup_multistep = steps.ShellSequence(
    commands=[
        util.ShellArg(command=['sudo', 'mkdir', '-p', '/opt/clasp']),
        util.ShellArg(command=['sudo', 'chown', '-R', 'admin', '/opt/clasp']),
        util.ShellArg(command=['cp','wscript.config.debian10','wscript.config'])
    ])

waf_configure = steps.ShellCommand(name="waf configure",
                                   command=["./waf", "configure"],
                                   description="waf configure",
                                   haltOnFailure=True)
waf_build_iboehm = steps.ShellCommand(name="waf build_iboehm",
                                      command=["./waf", "build_iboehm"],
                                      description="waf build_iboehm",
                                      haltOnFailure=True)
waf_build_aboehm = steps.ShellCommand(name="waf build_aboehm",
                                      command=["./waf", "build_aboehm"],
                                      description="waf build_aboehm",
                                      haltOnFailure=True)
waf_build_bboehm = steps.ShellCommand(name="waf build_bboehm",
                                      command=["./waf", "build_bboehm"],
                                      description="waf build_bboehm",
                                      haltOnFailure=True)
waf_build_cboehm = steps.ShellCommand(name="waf build_cboehm",
                                      command=["./waf", "build_cboehm"],
                                      description="waf build_cboehm",
                                      haltOnFailure=True)
waf_install_cboehm = steps.ShellCommand(name="waf install_cboehm",
                                      command=["./waf", "install_cboehm"],
                                      description="waf install_cboehm",
                                      haltOnFailure=True)
clasp_finish_multistep = steps.ShellSequence(
    commands=[
        util.ShellArg(command=['tar', 'cf', '/tmp/debian-clasp.tar', '/opt/clasp']),
        util.ShellArg(command=['gzip', '/tmp/debian-clasp.tar']),
        util.ShellArg(command=['aws', 's3', 'cp', '/tmp/debian-clasp.tar.gz', 's3://clasp-cando/clasp/', '--region', 'us-east-2'])
    ])

cando_finish_multistep = steps.ShellSequence(
    commands=[
        util.ShellArg(command=['tar', 'cf', '/tmp/debian-cando.tar', '/opt/clasp']),
        util.ShellArg(command=['gzip', '/tmp/debian-cando.tar']),
        util.ShellArg(command=['aws', 's3', 'cp', '/tmp/debian-cando.tar.gz', 's3://clasp-cando/cando/', '--region', 'us-east-2'])
    ])

# Factory for building clasp
factory_clasp = util.BuildFactory()
factory_clasp.addStep(git_clasp)
factory_clasp.addStep(waf_distclean)
factory_clasp.addStep(setup_multistep)
factory_clasp.addStep(waf_configure)
factory_clasp.addStep(waf_build_iboehm)
factory_clasp.addStep(waf_build_aboehm)
factory_clasp.addStep(waf_build_bboehm)
factory_clasp.addStep(waf_build_cboehm)
factory_clasp.addStep(waf_install_cboehm)
factory_clasp.addStep(clasp_finish_multistep)

# Factory for building cando
factory_cando = util.BuildFactory()
factory_cando.addStep(git_clasp)
factory_cando.addStep(add_cando)  # This pulls updates for cando into clasp
factory_cando.addStep(waf_distclean)
factory_cando.addStep(setup_multistep)
factory_cando.addStep(waf_configure)
factory_cando.addStep(waf_build_iboehm)
factory_cando.addStep(waf_build_aboehm)
factory_cando.addStep(waf_build_bboehm)
factory_cando.addStep(waf_build_cboehm)
factory_cando.addStep(waf_install_cboehm)
factory_cando.addStep(cando_finish_multistep)

c['builders'] = [
    util.BuilderConfig(name="clasp",
                       workernames=["clasp_bot"],
                       factory=factory_clasp),
    util.BuilderConfig(name="cando",
                       workernames=["cando_bot"],
                       factory=factory_cando)
]

####### buildbot services

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Clasp/Cando CI"
c['titleURL'] = "https://buildbot.github.io/hello-world/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://clasp-buildbot.ddns.net:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

