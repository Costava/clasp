#-*- mode: python; coding: utf-8-unix -*-

#### Clasp build configuration file.
###
### This file has to be named `wscript.config` to be
### recognised by the build system.

# Define where the llvm/clang is that clasp needs to build.
LLVM_CONFIG_BINARY = '/path/to/llvm-config-4.0'

# It contains some external dependencies for clasp. The end
# goal is that it won't be needed anymore and the default
# packages of the host OS are found and utilized. Unfortunately
# version constraints make that ideal sometimes unreachable.
#EXTERNALS_CLASP_DIR = '/path/externals-clasp/'

# To link to llvm debug libraries set a path to the llvm-config for the llvm debug build
# LLVM_CONFIG_DEBUG_PATH = "/full/path/externals-clasp/build/debug/bin/llvm-config"

# Use JIT notification - which is broken in llvm5.0
# Set this to True if you have applied the patch to llvm 5.0 or the
#   fix has been installed in llvm 5.whatever
LLVM5_ORC_NOTIFIER_PATCH = False


# Where to install clasp. Defaults to '/usr/local/'.
#PREFIX = '/usr/local/'

# SBCL is used at build time. Defaults to 'sbcl'.
#SBCL                = '/path/sbcl/run-sbcl.sh'

# Optional clasp binary. It is used only when rebuilding
# clasp, e.g. with the './waf rebuild_cboehm' command.
#CLASP               = '/path/cclasp-boehm'

# Optional turn on gprof profiling of all code (Linux only for now)
# PROFILING = True

# This is how you can specify non-standard locations
#INCLUDES = "/opt/boost_1_62_0/include"
#LINKFLAGS = ["-L/opt/boost_1_62_0/lib", "-Wl,-rpath=/opt/boost_1_62_0/lib"]

# This turns on build with address sanitizer
# ADDRESS_SANITIZER = True

# This controls how whether LTO is used and what kind ("thinlto"(default) or "lto" or "obj" (no lto))
# 'obj' is faster for debugging
# LTO_OPTION = 'obj'
